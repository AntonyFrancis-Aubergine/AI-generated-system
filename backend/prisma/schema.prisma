// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  INSTRUCTOR
  USER
  ADMIN
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  address  String?
  role     UserRole
  dob      DateTime?
  mobile   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  instructedClasses  FitnessClass[]
  bookings        FitnessClassBookings[]

  @@map("users")
}

model FitnessClassCategory {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  
  FitnessClasses FitnessClass[]

  @@map("fitness_class_categories")
}

model FitnessClass {
  id         String   @id @default(uuid())
  name       String
  categoryId String   @map("category_id")
  instructorId String @map("instructor_id")
  startsAt   DateTime @map("starts_at")
  endsAt     DateTime @map("ends_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  category   FitnessClassCategory @relation(fields: [categoryId], references: [id])
  instructor User                 @relation(fields: [instructorId], references: [id])
  bookings   FitnessClassBookings[]

  @@map("fitness_classes")
}

model FitnessClassBookings {
  id       String @id @default(uuid())
  userId   String @map("user_id")
  fitnessClassId  String @map("fitness_class_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  user     User         @relation(fields: [userId], references: [id])
  fitnessClass FitnessClass @relation(fields: [fitnessClassId], references: [id])

  @@map("fitness_class_bookings")
}


